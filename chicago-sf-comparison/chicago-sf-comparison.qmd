---
title: "Chicago vs San Francisco"
format: gfm
---

```{r}
#| label: setup
#| warning: false
#| message: false
#| results: false
library(tidyverse)
library(RSocrata)
library(sf)
library(here)
library(zoo)
```

Note: It appears the San Francisco Data Portal's API is not returning the dataset, meaning the first graph lacks San Francisco's data.

```{r}
#| label: Import Data

sf_permits <- read.socrata("https://data.sfgov.org/resource/p4e4-a5a7.csv?$query=SELECT permit_number, permit_type_definition, permit_creation_date, street_number, street_name, street_suffix, status, issued_date, revised_cost, existing_use, proposed_use, existing_units, proposed_units, location WHERE permit_type_definition='new construction' OR permit_type_definition='new construction wood frame' OR proposed_units>existing_units LIMIT 30000")

# OOOHHHH MMYYY GOODODDDD
chi_permits <- read.socrata("https://data.cityofchicago.org/resource/ydr8-5enu.csv?$query=SELECT id, permit_type, issue_date, reported_cost, work_description, community_area, census_tract, ward, location WHERE permit_type='PERMIT - NEW CONSTRUCTION' limit 30000")
# For future reference: glitch occurred where rsocrata would append &$order=:id to end of query, breaking the query
# fix: downloading "nightly" version of rsocrata, v 1.8.0-10, where the query works
```

```{r}
#| label: Setting Theme
theme_update(
  plot.background = element_rect(color = "gray10",
                                       fill = "gray10"),
        panel.background = element_blank(),
        
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        
        plot.title.position = "plot",
        plot.title = element_text(color = "white",
                                  family = "Space Grotesk",
                                  face = "bold",
                                  size = 20),
        
        plot.caption.position = "plot",
        plot.caption = element_text(color = "gray75",
                                family = "Space Grotesk"),
  
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_text(color = "gray75",
                                    family = "Space Grotesk",
                                    face = "bold"),
        axis.text = element_text(color = "gray60",
                                 family = "Space Grotesk"),
        
        legend.background = element_rect(color = "gray10",
                                         fill = "gray10"),
        legend.title = element_text(family = "Space Grotesk",
                                    face = "bold",
                                    color = "gray75"),
        legend.text = element_text(family = "Space Grotesk",
                                   color = "gray60"),
        legend.key = element_blank(),
        
        plot.margin = margin(10, 10, 10, 10)
)
```

```{r}
#| label: Clean Data
chi_permits_13_23 <- chi_permits %>% 
  mutate(
    issue_date = ymd(issue_date),
    dwelling = case_when(
      str_detect(str_to_lower(work_description), "revision|tent|expires") ~ FALSE,
      str_detect(str_to_lower(work_description), "(dwelling|unit|family|residence|d.u.|home)") ~ TRUE, # dwellings
      str_detect(str_to_lower(work_description), "hoist|temporary|porch|replace") ~ FALSE, # not dwellings
      TRUE ~ FALSE
    ), 
    city = "Chicago", .before = id
  ) %>% 
  filter(
    issue_date >= "2013-01-01" & issue_date < "2023-01-01",
    dwelling
  )
# after randomly selecting ~15 chicago permits, all but two were already built
# the two unbuilt ones were major projects that had plans in the works

sf_permits_13_23 <- sf_permits %>% 
  separate_wider_delim(
    permit_creation_date,
    delim = " ",
    names = c("permit_creation_date", "permit_creation_time"),
    too_few = "align_start"
  ) %>% 
  select(-permit_creation_time) %>% 
  mutate(
    permit_creation_date = ymd(permit_creation_date),
    address = str_c(street_number, street_name, street_suffix, sep = " "), .after = permit_creation_date
  ) %>% 
  filter(
    permit_creation_date >= "2013-01-01" & permit_creation_date < "2023-01-01",
    status %in% c("issued", "approved", "complete", "reinstated"),
    permit_type_definition %in% c("new construction", "new construction wood frame"),
    proposed_use %in% c("1 family dwelling", "2 family dwellin", "apartments")
  ) %>% 
  distinct(
    address,
    .keep_all = TRUE
  ) %>% 
  mutate(
    city = "San Francisco",
    .before = permit_number
  )

dual_permits_13_23 <- chi_permits_13_23 %>% 
  # below joins both dfs, merging the city column, but the rest are only in their respective city
  full_join(sf_permits_13_23, by = c("city" = "city"), suffix = c("_chicago", "_sanfrancisco")) %>%  
  mutate(
    issue_date = if_else(is.na(issue_date), # creates new issue_date column with both cities in it
                         permit_creation_date,
                         issue_date),
    location = if_else(is.na(location_chicago), # creates new location column with both cities in it
                       location_sanfrancisco,
                       location_chicago),
    year = year(issue_date)
  ) %>% 
  select(city, year, issue_date, location) %>% 
  count(city, year)
```

### That data cleaning was a mess. Here are the issues.

The first is that Chicago's building permit dataset doesn't designate what a permit is for.
Thus, leaving all the rows as-is loops new residential construction in with permits for business buildings, stages, and car hoists (yes, car hoists).
This obviously makes it important to search specifically for some keywords for housing and specifically avoid some keywords for not housing.
It's not perfect, but looking at the descriptions suggests that it's good enough.\n

### San Francisco's data is whole other beast.

The issue is with its dataset's labeling.\n

Reasonably, one would think that the construction of new housing would be completely under the "new construction" (or "new construction wood frame") permit type.
That approach is what I used to generate the final graph.
However, the dataset also has numerous rows where the number of proposed units is greater than the number of existing units.
This would suggest that there are even *more* new housing permits that are just hidden, but the majority of these permits are only *filed*, not complete or even issued.
The combination of San Francisco's permits being under multiple categories, many not even being issued, and Chicago counting its permits in a completely different way makes trying to analyze both datasets like comparing apples to oranges.\n

Ultimately, I wanted to work with RSocrata because it makes uploading data from these portals very easy, however it seems like each portal is simply too inconsistent to compare.
So take the first graph below with a grain of salt. Or a few grains. 
```{r}
#| label: Figuring Things Out
# The number of new construction permits in San Francisco is so absurdly low and I don't know why.
# I was wondering if there were more permit types that I wasn't aware of, but running:

sf_permit_test <- read.socrata("https://data.sfgov.org/resource/p4e4-a5a7.csv?$query=SELECT permit_number, permit_type_definition, permit_creation_date, status, issued_date, revised_cost, proposed_use, location WHERE permit_creation_date>'2013-01-01' LIMIT 10000") %>% 
  distinct(permit_type_definition)
sf_permit_test

# Shows that `new construction` and `new construction wood frame` are indeed the only two new construction permit types.
# The Census has the SF metro area building many more houses than SF's permit count would suggest, but I don't see why
# the SF data portal would be incorrect about how much it's building.
```

```{r}
#| label: Permits Per City Graphs
#| fig-width: 8
#| fig-asp: 0.666
breaks <- seq(2013, 2023, 1)

ggplot(
  dual_permits_13_23, 
  aes(x = year, 
      y = n, 
      fill = city)
  ) +
  geom_bar(
    stat = "identity",
    position = "dodge"
  ) +
  labs(
    title = "San Francisco Hates Building New Houses",
    y = "New Dwelling Construction Permits Issued",
    fill = "City"
  ) +
  scale_x_continuous(
    breaks = breaks, labels = breaks,
    expand = c(0,0)
  ) +
  scale_y_continuous(
    expand = c(0,0)
  ) +
  theme(
    panel.grid.major.y = element_line(linewidth = 0.25),
    legend.position = c(.91, .915),
  )

ggsave(here("chicago-sf-comparison", "plots", "sf-chi_permit-data-portal_bar-graph.png"), width = 8, height = 16/3)
```

### Department of Housing and Urban Development to the Rescue!
The DHUD has a project called the "State of the Cities Data Systems" (SOCDS), which contains a few different datasets pertaining to cities.
Most of them are antiquated (you can loop in their website, too), but they still maintain their "Building Permits Database," which keeps track of the number of housing permits issued in various cities.
Unfortunately, I have to download it to a CSV to work with it, but it's already a really tidy dataset and I'm glad to have some consistency.

```{r}
#| label: Import HUD Data
#| results: hide
#| message: false
chi_hud_permits <- read_csv(here("data", "housing-permits", "chicago_housing-permits.csv"))
sf_hud_permits <- read_csv(here("data", "housing-permits", "san-francisco_housing-permits.csv"))
```

```{r}
#| label: Clean HUD Data
chi_hud_total <- chi_hud_permits %>% 
  filter(
    Series == "Total Units",
    Permits > 0,
    Year > 2012
  ) %>% 
  mutate(
    moving_avg = rollmean(Permits, k = 12, fill = NA, align = "right")
  )

sf_hud_total <- sf_hud_permits %>% 
  filter(
    Series == "Total Units",
    Permits > 0,
    Year > 2012
  ) %>% 
  mutate(
    moving_avg = rollmean(Permits, k = 12, fill = NA, align = "right")
  )

hud_rolling_avgs <- bind_rows(chi_hud_total, sf_hud_total) %>% 
  filter(
    !is.na(moving_avg)
  ) %>% 
  mutate(
    date = make_date(Year, Month, "01"),
    Location = if_else(str_detect(Location, "CHICAGO"), "Chicago", "San Francisco")
  )
```

```{r}
#| label: Chicago and SF Rolling Averages
#| fig-width: 8
#| fig-asp: 0.666

ggplot(
    hud_rolling_avgs,
    aes(x = date,
        y = moving_avg,
        group = Location)
  ) +
  geom_line(
    aes(color = Location)
  ) +
  labs(
    title = "San Francisco's Housing Permitting Has Yet to\nReturn to Pre-Pandemic Levels",
    color = "City",
    y = "Monthly Housing Permits, 12-Mo. Moving Avg.",
    caption = "Data from the SOCDS Building Permits Database"
  ) +
  coord_cartesian(
    ylim = c(-5, 999)
  ) +
  scale_y_continuous(
    breaks = c(0, 250, 500, 750),
    expand = c(0,0)
  ) +
  scale_color_manual(
    values = c("Chicago" = "#9575DE",
               "San Francisco" = "#E966A0")
  ) +
  theme(
    panel.grid.major.y = element_line(linewidth = 0.15),
    panel.grid.minor.y = element_line(linewidth = 0.15),
    legend.position = c(.91, .78),
    plot.margin = margin(10, 5, 5, 10)
  ) +
  annotate(
    geom = "segment",
    x = as_date("2020-03-11"),
    xend = as_date("2020-03-11"),
    y = 0,
    yend = 875,
    color = "white",
    linetype = "dashed",
    alpha = 0.5
  ) +
  annotate(
    geom = "text",
    x = as_date("2019-06-01"),
    y = 935,
    color = "#05BFDB",
    family = "Space Grotesk semibold",
    label = "Pandemic\nDeclared",
    size = 3,
    angle = "30"
  ) +
  annotate(
    geom = "curve",
    x = as_date("2019-11-01"),
    xend = as_date("2020-03-20"),
    y = 970,
    yend = 890,
    arrow = arrow(length = unit(0.08, "inch")),
    curvature = -0.7,
    color = "#05BFDB",
    linewidth = 0.5
  )

ggsave(here("chicago-sf-comparison", "plots", "SOCDS-permit_12-mo_line-graph.png"), width = 8, height = 16/3)
```

This next graph is more just for messing around, 6-month and below moving averages make the graphs way too spiky.

```{r}
#| label: 3-month Rolling Averages
chi_hud_total_3 <- chi_hud_permits %>% 
  filter(
    Series == "Total Units",
    Permits > 0
  ) %>% 
  mutate(
    moving_avg = rollmean(Permits, k = 6, fill = NA, align = "right")
  )

sf_hud_total_3 <- sf_hud_permits %>% 
  filter(
    Series == "Total Units",
    Permits > 0
  ) %>% 
  mutate(
    moving_avg = rollmean(Permits, k = 6, fill = NA, align = "right")
  )

hud_rolling_avgs_3 <- bind_rows(chi_hud_total_3, sf_hud_total_3) %>% 
  mutate(
    date = make_date(Year, Month, "01"),
    Location = if_else(str_detect(Location, "CHICAGO"), "Chicago", "San Francisco")
  ) %>% 
  filter(
    date >= "2012-12-01"
  )
```

```{r}
#| label: Chicago and SF 6-Month Rolling Averages
#| fig-width: 8
#| fig-asp: 0.666

ggplot(
    hud_rolling_avgs_3,
    aes(x = date,
        y = moving_avg,
        group = Location)
  ) +
  geom_line(
    aes(color = Location)
  ) +
  labs(
    title = "San Francisco's Housing Permitting Has Yet to\nReturn to Pre-Pandemic Levels",
    color = "City",
    y = "Monthly Housing Permits, 6-Mo. Moving Avg.",
    caption = "Data from the SOCDS Building Permits Database"
  ) +
  coord_cartesian(
    ylim = c(-5, 1050)
  ) +
  scale_y_continuous(
    breaks = c(0, 250, 500, 750, 1000),
    expand = c(0,0)
  ) +
  scale_color_manual(
    values = c("Chicago" = "#9575DE",
               "San Francisco" = "#E966A0")
  ) +
  theme(
    panel.grid.major.y = element_line(linewidth = 0.15),
    panel.grid.minor.y = element_line(linewidth = 0.15),
    legend.background = element_rect(fill = "gray10",
                                     color = "gray60",
                                     linewidth = 0.30),
    legend.position = c(.91, .90),
    plot.margin = margin(10, 5, 5, 10)
  ) +
  annotate(
    geom = "segment",
    x = as_date("2020-03-11"),
    xend = as_date("2020-03-11"),
    y = 0,
    yend = 1000,
    color = "white",
    linetype = "dashed",
    alpha = 0.5
  ) +
  annotate(
    geom = "text",
    x = as_date("2019-06-01"),
    y = 935,
    color = "#05BFDB",
    family = "Space Grotesk semibold",
    label = "Pandemic\nDeclared",
    size = 3,
    angle = "30"
  ) +
  annotate(
    geom = "curve",
    x = as_date("2019-06-01"),
    xend = as_date("2020-02-20"),
    y = 868,
    yend = 828,
    arrow = arrow(length = unit(0.08, "inch")),
    curvature = 0.5,
    color = "#05BFDB",
    linewidth = 0.5
  )

ggsave(here("chicago-sf-comparison", "plots", "SOCDS-permit_6-mo_line-graph.png"), width = 8, height = 16/3)
```